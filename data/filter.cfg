<?
function lname(lng)
	if osm.tags.name then return osm.tags.name end ;

   	local lang = lng or "en" ;
    	local tag = "name:" ..  lang ;

	return osm.tags[tag] ;
end

function attach_tags_from_hiking_route()
	
	if osm.is_way() and osm.relations ~= Nil then
		local network, ref, symbol ;
		for i = 1,#(osm.relations) do
			local rel = osm.relations[i] ;
			
			if rel.type == "route" and rel.route == "hiking" then 
				local rnet = rel.network or "lwn" ;
				local rref = rel.ref ;
				local rsymbol = rel["osmc:symbol"] ;

				if network ~= "iwn" then 
					if not (network == "nwn" and ( rnet == "rwn" or rnet == "lwn") )  then
					 	if not ( network == "rwn" and rnet == "lwn" ) then
							if  network ~= "lwn" then
								network, ref = rnet, rref ;
                                if rsymbol ~= Nil then symbol = "osmc:" .. rsymbol end
							end
						end
					end
				end  
			end
		end

		osm.add_tags{ hknetwork = network } ;
		osm.attach_tags{"hknetwork", "symbol", "ref"} ;

	end			
end

-- Get the admin_level from parent relation. If multiple choose the lowest level
function make_admin_boundaries()
	if osm.is_way() then
	    local admin_level = osm.admin_level 
	    if osm.relations ~= Nil then
	        
	        for i = 1,#(osm.relations) do
			    local rel = osm.relations[i] ;
			  
			    if rel.type == "boundary" and rel.boundary == "administrative" then 
			     
    		    	local level = rel.admin_level 
    		    	if level ~= Nil and ( admin_level == Nil or tonumber(level) < tonumber(admin_level) ) then
    		    	    admin_level = level 
    		    	end
			    end
    	    end
	    end
	    if admin_level ~= Nil then
            osm.add_tags{ ["admin_level"] = admin_level, boundary = "administrative" } ;
	    	osm.attach_tags{"admin_level", "boundary"} ;
        end	    	
	end
end

function add_route(type)
	if osm.is_way() then
	    if osm.route == type then 
	    return 
	    elseif osm.relations ~= Nil then
	        for i = 1,#(osm.relations) do
		    local rel = osm.relations[i] ;
		       if rel.type == "route" and rel.route == type then 
    			    osm.add_tags{ ["route"] = type } ; -- copy tag from parent relation
    			    return ;
 		    end
    	    	end
	    end
	end
end
?>
{
    [oneway in ('yes', '1', 'true' ) ] { set oneway = 'yes' ; }
    [oneway in ('no', 0, 'false' ) ] { set oneway = 'no' ; }
    [oneway == '-1' ] { delete oneway ; }
    continue ; 
}
{
    set name = lname('el') ; 
    attach name ; continue ;
}
[ is_poi() ] {
    [ highway ] {
        [ highway in ('bus_stop', 'mini_roundabout', 'traffic_signals') ] { write [z17] highway ; }
        [ highway == 'turning_circle' ] { write [z15] highway ; }
    }
    [ amenity ] {
        [ amenity in ('atm', 'bank', 'bar', 'bench', 'bicycle_rental', 'cafe', 'cinema',  'drinking_water', 'fast_food',
                    'fountain', 'fire_station', 'kindergarten', 'library', 'parking', 'pharmacy', 
                    'post_box', 'post_office', 'pub', 'recycling', 'restaurant', 'school', 'telephone', 'theatre', 'townhall',
                    'toilets', 'university' )  ] { write [z17] amenity ; }
        [ amenity in ('fuel', 'police', 'shelter') ] { write [z16] amenity ; }
        [ amenity == 'bus_station' ] { write [z15] amenity ; }
        [ amenity == 'place_of_worship' ] { write [z17] amenity, religion ; }
    }
    [ emergency == 'phone' ] { write [z16] emergency ; }
    [ leisure in ('playground', 'slipway' ) ] { write [z17] leisure ; }
    [ shop in ('bakery', 'bicycle', 'hairdresser', 'laundry', 'mall', 'organic', 'supermarket' ) ] { write [z17] shop ; }
    [ railway in ('halt', 'level_crossing', 'tram_stop') ] { write [z16] railway ; }
    [ railway in ('station', 'subway', 'light_rail') ] { write [z15] railway='station' ; }
    [ tourism in ('alpine_hut', 'viewpoint' ) ] { write [z15] tourism ; }
    [ tourism in ('attraction', 'hostel', 'hotel', 'information', 'museum' ) ] { write [z17] tourism ; }
    [ historic in ('memorial', 'monument') ] { write [z17] historic ; }
    [ place ] {
        [ place == 'country' ] { write [z3] place ; }
        [ place == 'city' ] { write [z6] place ; }
        [ place == 'town' ] { write [z9] place ; }
        [ place in ('suburb', 'village', 'island') ] { write [z12] place ; } 
        [ place in ('hamlet', 'locality') ] { write [z13] place ; }
    }
    [ natural ] {
        [ natural in ('peak', 'volcano') ] { write [z12] natural ; }
        [ natural == 'cave_entrance' ] { write [z14] natural ; }
        [ natural == 'spring' ] { write [z17] natural ; }
    }
    [ barrier in ( 'bollard', 'cycle_barrier', 'gate', 'lift_gate' ) ] { write [z17] barrier ; }
    [ barrier == 'toll_booth' ] { write [z15] barrier ; }
    [ man_made in ('lighthouse', 'surveillance', 'tower', 'windmill') ] { write [z17] man_made ; }
    [ power in ( 'generator', 'tower') ] { write [z17] tower ; }
    [ aeroway in ( 'aerodrome', 'airport' ) ] { write [z13] aeroway ; }
    [ aeroway in ( 'gate', 'helipad' ) ] { write [z17] aeroway ; }
}
[ is_way() ] { 
    {   attach layer, area, bridge, leaf_type ; 
        make_admin_boundaries() ;
        add_route('ferry') ;
        continue ; 
    }
     [ boundary == 'administrative' ] {
        [ admin_level in ('1', '2', '3') ] { write [z4] boundary, admin_level ; }
        [ admin_level in ('4', '5', '6') ] { write [z6] boundary, admin_level ; } 
        { write [z0] boundary ; }
        continue ;
    }
    [ highway ] {
        attach tracktype, tunnel, oneway, surface, trail_visibility, sas_scale ; 
	attach_tags_from_hiking_route() ;
        [ highway in ('bridleway', 'bus_guideway', 'byway', 'construction', 'cycleway', 'footway', 'living_street', 'unclassified') ] { write [z13] highway ; }
        [ highway in ('path', 'pedestrian', 'services', 'service') ] { write [z14] highway ; }
        [ highway in ('motorway', 'motorway_link', 'trunk', 'trunk_link') ] { write [z6] highway ; }
        [ highway in ('primary', 'primary_link') ] { write [z8] highway ; }
        [ highway == 'unclassified' ] { write [z13] highway ; }
        [ highway == 'track' ] { write [z13] highway, track_type ; }
        [ highway in ('raceway', 'residential', 'road', 'secondary', 'secondary_link', 'tertiary', 'tertiary_link') ] { write [z12] highway ; }
        [ highway == 'steps' ] { write [z16] highway ; }
    }
    [ route == 'ferry' ] { write [z12] route; }
    [ waterway ] {
        [ lock == 'yes' ] { write [z14] lock ; continue ; }
        [ waterway in ( 'river', 'riverbank' ) ] { write [z8] waterway ;  }
        [ waterway in ( 'canal', 'dam') ] { write [z10] waterway ; }
        [ waterway in ( 'drain', 'stream') ] { write [z14] waterway ; }
    }
    [ natural ] {
        [ natural in ( 'sea', 'nosea', 'coastline' ) ] { write [z0] natural ; }
        [ natural in ( 'beach', 'fell', 'grassland', 'heath', 'scrub', 'scree' ) ] { write [z10] natural ; }
        [ natural in ( 'glacier', 'land', 'water', 'wood' ) ] { write [z8] natural ; }
        [ natural in ( 'wetland', 'marsch' ) ] { write [z12] natural ; }
    }
    [ landuse ] {
        [ landuse in ( 'allotments', 'brownfield', 'cemetery', 'commercial', 'industrial', 'military', 'quarry', 'railway',
                        'recreation_ground', 'reservoir', 'residential', 'retail', 'village_green' ) ] { write [z10] landuse ; }
        [ landuse in ( 'basin', 'construction', 'farm', 'farmland', 'factory', 'farmyard', 'grass', 'greenfield', 
                        'landfill', 'meadow', 'orchard', 'vineyard' ) ] { write [z12] landuse ; }
        [ landuse in ( 'forest', 'wood' ) ] { write [z8] landuse ; }
    }
    [ leisure ] {
        [ leisure in ( 'common', 'dog_park', 'garden', 'golf_course', 'pitch', 'playground', 'sports_center', 'track', 'water_park' ) ] { write [z12] leisure ; }
        [ leisure in ( 'park', 'stadium' ) ] { write [z10] leisure ; }
        [ leisure == 'swimming_pool' ] { write [z14] leisure ; }
        [ leisure == 'nature_reserve' ] {
            write [z12] leisure, boundary, protect_class ; 
        }
    }
    [ sport in ( 'golf', 'soccer', 'swimming', 'tennis', 'baseball', 'basketball', 'volleyball', 'skiing', 'shooting', 
                 'cricket', 'boules', 'football', 'skating', 'climbing', 'equestrian', 'bowls', 'multi' ) ] { write [z12] sport ; }
    [ amenity ] {
        [ amenity in ( 'college', 'embassy', 'hospital', 'parking', 'university' ) ] { write [z13] amenity ; }
        [ amenity in ( 'grave_yard', 'parking', 'school', 'swimming_pool', 'theatre' ) ] { write [z14] amenity ; }
        [ amenity == 'fountain' ] { write [z16] amenity ; }
        [ amenity == 'toilets' ] { write [z17] amenity ; }
    }
    [ tourism ] {
        [ tourism == 'hostel'] { write [z15] tourism ; }
        [ tourism == 'zoo' ] { write [z12] tourism ; }
        [ tourism == 'attraction' ] { write [z14] tourism ; } 
    }
    [ railway ] {
        [ railway in ( 'funicular', 'light_rail' ) ] { write [z12] railway ; }
        [ railway in ( 'miniature', 'monorail', 'narrow_gauge', 'platform', 'preserved', 'station' ) ] { write [z14] railway ; }
        [ railway == 'rail' ] { write [z10] railway ; }
        [ railway in ( 'disused', 'subway', 'tram' ) ] { write [z15] railway ; }
    }
    [ building ] {
        [ building in ( 'apartment', 'apartments', 'barn', 'block', 'building', 'cabin', 'castle', 'cathedral', 'chapel', 
                        'church', 'civic', 'civil', 'commercial', 'detached', 'garage', 'garages', 'embassy', 'factory',
                        'farm', 'farm_auxiliary', 'greenhouse', 'gym', 'hangar', 'hotel', 'hospital', 'house', 'hut',
                        'industrial', 'library', 'manufacture', 'monastery', 'mosque', 'museum', 'office', 'public',
                        'residential', 'residential', 'retail', 'roof', 'ruins', 'school', 'semidetached_house', 'service',
                        'shed', 'shelter', 'shop', 'sports', 'supermarket', 'terrace', 'transportation', 'wall', 'warehouse',
                        'yes' ) ] { write [z15] building ; }
        [ building in ( 'goverment', 'university' ) ] { write [z13] building ; }
        [ building in ( 'train_station' ) ] { write [z14] building ; }
    }
   
    [ boundary in ( 'national_park', 'protected_area') ] { write [z12] boundary, protect_class ; }
    [ aeroway ] {
        [ aeroway in ('aerodrome', 'apron') ] { write [z13] aeroway ; }
        [ aeroway in ('runway', 'taxiway') ] { write [z10] aeroway ; }
        [ aeroway == 'helipad' ] { write [z17] aeroway ; }
        [ aeroway == 'terminal' ] { write [z15] aeroway ; }
    }
    [ aerialway in ('cable_car', 'chair_lift', 'drag_lift', 'gondola', 'magic_carpet', 'mixed_lift', 'rope_tow' ) ] { write [z13] aerialway, oneway ; }
    [ barrier ] {
        [ barrier in ('city_wall', 'fence') ] { write [z14] barrier ; }
        [ barrier in ( 'retaining_wall', 'wall' ) ] { write [z16] barrier ; }
    }
    [ historic ] {
        [ historic == 'ruins' ] { write [z15] historic ; }
        [ historic == 'castle' ] { write [z17] historic ; }
    }
    [ man_made == 'pier' ] { write [z15] man_made ; }
    [ military in ( 'airfield', 'barracks', 'naval_base' ) ] { write [z12] military ; }
    [ place == 'locality' ] { write [z17] place ; }
    [ contour_ext ] {
        write [z12] contour_ext ;
        [ ele in ('100', '200', '300', '400', '500', '600', '700', '800', '900',
                   '1000', '1100', '1200', '1300', '1400', '1500', '1600', '1700',
                   '1800', '1900', '2000', '2100', '2200', '2300', '2400', '2500',
                   '2600', '2700', '2800', '2900', '3000') ] { write [z14] ele ; }
    }
}
[ is_relation() ] {
    [ route == 'piste' && piste:type in ('downhill', 'nordic', 'sled') ] { write [z13] route, piste:type, piste:difficulty ; }
    [ route == 'hiking' ] { write [z10] route, ref, network ; }
}


